function [y1] = type1shift10neurons(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
% Generated by Neural Network Toolbox function genFunction, 10-May-2018 00:18:29.
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.
%#ok<*RPMT0>
% ===== NEURAL NETWORK CONSTANTS =====
% Input 1
x1_step1.xoffset = [0;0];
x1_step1.gain = [0.0833333333333333;0.0909090909090909];
x1_step1.ymin = -1;
% Layer 1
b1 = [-4.4757301909585703;-3.5303969829329471;2.4602431886758955;-1.3677294432720868;-0.53125792231659985;-0.59895119842347655;-1.4308060112295184;2.5077792265070999;3.6282143330250669;4.4714543141969854];
IW1_1 = [2.9375039457257586 -3.1966261864340946;2.9088404800545229 3.2287806932172112;-2.7707982323923819 3.3323434176698612;4.3209533076978142 -0.052705711045560169;1.9293513451060642 3.9820710143860807;-3.2017044774938177 -2.9858442474529623;-4.1019952994734039 -1.8132523303521635;0.429440656384937 4.3673186681883305;3.6908240335702258 2.1771901927192454;2.9441182643724177 3.1062218668667141];
% Layer 2
b2 = -0.043323416673423099;
LW2_1 = [0.038261014884240108 -0.21234604000558166 0.16838404890808922 0.39112587270304594 -0.036508450278997073 0.00081579142721555087 -0.30432570039547635 -0.092845228066109162 0.35227814717596401 -0.39519155627871566];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.11267665145821;
y1_step1.xoffset = 0.0355556;
% ===== SIMULATION ========
% Dimensions
Q = size(x1,1); % samples
% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);
% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;
% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end
% ===== MODULE FUNCTIONS ========
% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

